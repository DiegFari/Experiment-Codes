}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments)
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv") %>% format.pcibex()
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv") %>% format.pcibex()
results_low_sd
# Set working directory to source file location
# Documentation function to read in PCIbex Farm results files (source: https://doc.pcibex.net/advanced-tutorial/12_examining-data.html#reading-in-results)
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments) %>%
filter(ItemType %in% c('personal-info', 'experiment', 'manipulation-check', 'sd-bias'))
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv") %>% format.pcibex()
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv") %>% format.pcibex()
results_low_sd
# Set working directory to source file location
# Documentation function to read in PCIbex Farm results files (source: https://doc.pcibex.net/advanced-tutorial/12_examining-data.html#reading-in-results)
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments) %>%
filter(ItemType %in% c('personal-info', 'experiment', 'manipulation-check', 'sd-bias'))
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv") %>% format.pcibex()
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv") %>% format.pcibex()
results_low_sd
View(format.pcibex)
View(results_high_sd)
# Set working directory to source file location
# Documentation function to read in PCIbex Farm results files (source: https://doc.pcibex.net/advanced-tutorial/12_examining-data.html#reading-in-results)
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments) %>%
filter(ItemType %in% c('personal-info', 'experiment', 'manipulation-check', 'sd-bias'))
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv") %>% format.pcibex()
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv") %>% format.pcibex()
results_low_sd
knitr::opts_chunk$set(echo = TRUE)
## Loading necessary libraries
library(dplyr)
library(ggplot2)
library(tidyverse)
library(broom)
library(lme4)
library(boot)
library(ordinal)
# Set working directory to source file location
# Documentation function to read in PCIbex Farm results files (source: https://doc.pcibex.net/advanced-tutorial/12_examining-data.html#reading-in-results)
read.pcibex <- function(filepath, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments) %>%
filter(ItemType %in% c('personal-info', 'experiment', 'manipulation-check', 'sd-bias'))
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv")
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv")
results_low_sd
# Set working directory to source file location
# Documentation function to read in PCIbex Farm results files (source: https://doc.pcibex.net/advanced-tutorial/12_examining-data.html#reading-in-results)
read.pcibex <- function(filepath, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments) %>%
filter(ItemType %in% c('personal-info', 'experiment', 'manipulation-check', 'sd-bias'))
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv") %>% format.pcibex()
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv") %>% format.pcibex()
results_low_sd
# Set working directory to source file location
# Documentation function to read in PCIbex Farm results files (source: https://doc.pcibex.net/advanced-tutorial/12_examining-data.html#reading-in-results)
read.pcibex <- function(filepath, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments) %>%
filter(ItemType %in% c('personal-info', 'experiment', 'manipulation-check', 'sd-bias')) %>%
filter(PennElementType != 'Timer')
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv") %>% format.pcibex()
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv") %>% format.pcibex()
results_low_sd
# Set working directory to source file location
# Documentation function to read in PCIbex Farm results files (source: https://doc.pcibex.net/advanced-tutorial/12_examining-data.html#reading-in-results)
read.pcibex <- function(filepath, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
mutate(EventTime = if_else(EventTime == "Never", NA_real_, suppressWarnings(as.numeric(EventTime)))) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments) %>%
filter(ItemType %in% c('personal-info', 'experiment', 'manipulation-check', 'sd-bias')) %>%
filter(PennElementType != 'Timer')
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv") %>% format.pcibex()
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv") %>% format.pcibex()
results_low_sd
# Set working directory to source file location
# Documentation function to read in PCIbex Farm results files (source: https://doc.pcibex.net/advanced-tutorial/12_examining-data.html#reading-in-results)
read.pcibex <- function(filepath, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
mutate(EventTime = as.numeric(EventTime)) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments) %>%
filter(ItemType %in% c('personal-info', 'experiment', 'manipulation-check', 'sd-bias')) %>%
filter(PennElementType != 'Timer')
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv") %>% format.pcibex()
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv") %>% format.pcibex()
results_low_sd
# Set working directory to source file location
# Documentation function to read in PCIbex Farm results files (source: https://doc.pcibex.net/advanced-tutorial/12_examining-data.html#reading-in-results)
read.pcibex <- function(filepath, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
# Read all columns as character first to avoid scientific notation
df <- read.csv(filepath, comment.char="#", header=FALSE, col.names=cols, colClasses="character")
# Convert numeric columns back, except for EventTime
numeric_cols <- setdiff(names(df), "EventTime")
df[numeric_cols] <- lapply(df[numeric_cols], type.convert, as.is=TRUE)
return(df)
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments) %>%
filter(ItemType %in% c('personal-info', 'experiment', 'manipulation-check', 'sd-bias')) %>%
filter(PennElementType != 'Timer')
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv") %>% format.pcibex()
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv") %>% format.pcibex()
results_low_sd
# Set working directory to source file location
# Documentation function to read in PCIbex Farm results files (source: https://doc.pcibex.net/advanced-tutorial/12_examining-data.html#reading-in-results)
read.pcibex <- function(filepath, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols, colClasses="character"))
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments) %>%
filter(ItemType %in% c('personal-info', 'experiment', 'manipulation-check', 'sd-bias')) %>%
filter(PennElementType != 'Timer')
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv") %>% format.pcibex()
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv") %>% format.pcibex()
results_low_sd
# Set working directory to source file location
# Documentation function to read in PCIbex Farm results files (source: https://doc.pcibex.net/advanced-tutorial/12_examining-data.html#reading-in-results)
read.pcibex <- function(filepath, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols, colClasses="character"))
}
# Function to format PCIbex Farm results files
format.pcibex <- function(results, group) {
# Rename and remove noise
formatted_results <- results %>%
rename(Subject = MD5.hash.of.participant.s.IP.address, ItemNumber = Order.number.of.item, ItemType = Label, Age = age, Gender = gender, Occupation = occupation, Nationality = nationality) %>%
select(-Results.reception.time, -Controller.name, -Inner.element.number, -Latin.Square.Group, -Comments) %>%
filter(ItemType %in% c('personal-info', 'experiment', 'manipulation-check', 'sd-bias')) %>%
filter(PennElementType != 'Timer') %>%
mutate(group = group)
return(formatted_results)
}
# Read in result files
results_high_sd <- read.pcibex("results_high_sd.csv") %>% format.pcibex('high-sd')
results_high_sd
results_low_sd <- read.pcibex("results_low_sd.csv") %>% format.pcibex('low-sd')
results_low_sd
